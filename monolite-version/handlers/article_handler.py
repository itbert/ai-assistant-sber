# handlers/article_handler.py

from telebot import TeleBot
from telebot.types import CallbackQuery, Message, InlineKeyboardMarkup
from models.user_state import user_state
from services.database_service import get_articles_from_db
from keyboards.navigation_keyboards import get_article_navigation_markup
from constants import CATEGORIES, SOURCES, TRANSLATION_DICT
import logging

logger = logging.getLogger(__name__)

def register_article_handlers(bot: TeleBot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))
    def handle_date_selection(call: CallbackQuery):
        try:
            _, period_str, category = call.data.split("_", 2)
            period_num = int(period_str)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = CATEGORIES.get(category, [])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton('üá∑üá∫ –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', callback_data=f"filter_0_{call.data}"),
                InlineKeyboardButton('üåê –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ', callback_data=f"filter_1_{call.data}"),
                InlineKeyboardButton('üîç –õ—é–±—ã–µ', callback_data=f"filter_2_{call.data}")
            )

            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("filter_"))
    def handle_source_filter(call: CallbackQuery):
        try:
            _, filter_type, _, period_str, category = call.data.split("_", 4)
            filter_type = int(filter_type)
            period_num = int(period_str)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î
            subcategories = CATEGORIES.get(category, [])
            articles = get_articles_from_db(subcategories)

            if not articles:
                bot.send_message(call.message.chat.id, "–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state.set_user_data(call.message.chat.id, category, articles)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
            show_article(bot, call.message.chat.id, index=0, filter_type=filter_type, call_id=call.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("nav_"))
    def handle_navigation(call: CallbackQuery):
        try:
            direction = call.data.split("_")[1]
            chat_id = call.message.chat.id

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = user_state.get_user_data(chat_id)
            if not user_data:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                return

            delta = -1 if direction == "prev" else 1
            success = user_state.update_index(chat_id, delta)

            if not success:
                bot.answer_callback_query(call.id, "–í—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —Å–ø–∏—Å–∫–∞.")
                return

            current_index = user_data["current_index"]
            filter_type = int(call.data.split("_")[-1])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å—ë–π
            show_article(bot, chat_id, current_index, filter_type, call.id, call.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")


def show_article(bot: TeleBot, chat_id: int, index: int, filter_type: int, call_id: str, message_id: int = None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        user_data = user_state.get_user_data(chat_id)
        if not user_data or index >= len(user_data["articles"]):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–ª—è chat_id {chat_id}")
            return False

        article = user_data["articles"][index]
        headline, time_author, description, link, category, source = article

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        if filter_type != 2 and source not in SOURCES[filter_type]:
            return show_article(bot, chat_id, index + 1, filter_type, call_id, message_id)

        time_author = time_author or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        description = description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        category_ru = TRANSLATION_DICT.get(category, category)
        clickable_headline = f'<a href="{link}">{headline}</a>'

        message_text = (
            f"üìå <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {clickable_headline}\n"
            f"‚è≥ <b>–í—Ä–µ–º—è:</b> {time_author}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:300] + '...' if len(description) > 300 else description}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_ru}\n"
            f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {link}"
        )

        has_prev = index > 0
        has_next = index < len(user_data["articles"]) - 1

        markup = get_article_navigation_markup(has_prev, has_next)

        if message_id is None:
            bot.send_message(
                chat_id,
                message_text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
        else:
            bot.edit_message_text(
                message_text,
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )

        logger.info(f"–°—Ç–∞—Ç—å—è #{index} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return False