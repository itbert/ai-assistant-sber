import telebot
from telebot import types
import sqlite3
import logging
import datetime


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

user_articles = {}
categories = {
    "Safety": [
        "Emergencies (Environmental)",
        "Physical Impacts",
        "Community health and Safety",
        "Employee Health and Safety",
        "Product Safety and Quality"
    ],
    "Environmental": [
        "Waste Management",
        "Climate Risks",
        "Greenhouse Gas Emissions",
        "Air Pollution",
        "Energy Efficiency and Renewable",
        "Hazardous Materials Management",
        "Soil and Groundwater Impact",
        "Wastewater Management",
        "Water Consumption",
        "Surface Water Pollution",
        "Natural Resources",
        "Landscape Transformation",
        "Land Rehabilitation",
        "Biodiversity",
        "Animal Welfare",
        "Environmental Management"
    ],
    "Sustainable Cities": [
        "Planning Limitations",
        "Land Acquisition and Resettlement (Environmental)"
    ],
    "Manufacturing": [
        "Supply Chain (Environmental)"
    ],
    "Culture": [
        "Cultural Heritage"
    ]
}
dates = ['–≠—Ç–∞ –Ω–µ–¥–µ–ª—è', '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è', '–ó–∞ –≤–µ—Å—å –º–µ—Å—è—Ü']
sources = [['rbc.ru', 'ferra.ru', 'pro.rbc.ru', 'ekb.plus.rbc.ru', 'realty.rbc.ru','editorial.rbc.ru', 'wine.rbc.ru', 'rbcrealty.ru'],['Nature.com', 'https://www.artificialintelligence-news.com'],['RBC.ru', 'Ferra.ru','Nature.com', 'https://www.artificialintelligence-news.com']]
translation_dict = {
    "Safety": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "Environmental": "–≠–∫–æ–ª–æ–≥–∏—è",
    "Sustainable Cities": "–£—Å—Ç–æ–π—á–∏–≤—ã–µ –≥–æ—Ä–æ–¥–∞",
    "Manufacturing": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "Culture": "–ö—É–ª—å—Ç—É—Ä–∞",

    "Emergencies (Environmental)": "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ)",
    "Physical Impacts": "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è",
    "Community health and Safety": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤",
    "Employee Health and Safety": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    "Product Safety and Quality": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",

    "Waste Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–∞–º–∏",
    "Climate Risks": "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏",
    "Greenhouse Gas Emissions": "–í—ã–±—Ä–æ—Å—ã –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤",
    "Air Pollution": "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞",
    "Energy Efficiency and Renewable": "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏",
    "Hazardous Materials Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏",
    "Soil and Groundwater Impact": "–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–æ—á–≤—É –∏ –ø–æ–¥–∑–µ–º–Ω—ã–µ –≤–æ–¥—ã",
    "Wastewater Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ—á–Ω—ã–º–∏ –≤–æ–¥–∞–º–∏",
    "Water Consumption": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã",
    "Surface Water Pollution": "–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –≤–æ–¥",
    "Natural Resources": "–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
    "Landscape Transformation": "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞",
    "Land Rehabilitation": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–µ–º–µ–ª—å",
    "Biodiversity": "–ë–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ",
    "Animal Welfare": "–ë–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "Environmental Management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π",
    "Supply Chain (Environmental)": "–¶–µ–ø–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è)",

    "Planning Limitations": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "Land Acquisition and Resettlement (Environmental)": "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∑–µ–º–µ–ª—å –∏ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ (—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ)",

    "Cultural Heritage": "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ"
}

t = open('../TOKEN.txt')
TOKEN = t.read().strip()
t.close()
bot = telebot.TeleBot(TOKEN)



def period(n):
    l = []
    wd = int(datetime.datetime.now().weekday())
    d = datetime.datetime.now().date()
    if n == 1:
        for i in range(wd+1):
            l.append(d-datetime.timedelta(days = i))
        for i in range(6-wd):
            l.append(str(d+datetime.timedelta(days = i)))
    return l

def get_articles_from_db(subcategories):
    try:
        conn = sqlite3.connect("../Executing/websites.db")
        cursor = conn.cursor()
        placeholders = ",".join(["?"] * len(subcategories))
        cursor.execute(f"""
            SELECT headline, time_author, description, link, category, source
            FROM AllArticles 
            WHERE category IN ({placeholders})
        """, subcategories)
        articles = cursor.fetchall()
        conn.close()
        return articles
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        return []


def show_article(chat_id, index, m_id, filter, cd):
    try:

        data = user_articles.get(chat_id)
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—å–∏ #{index} –¥–ª—è chat_id {chat_id}. –î–∞–Ω–Ω—ã–µ: {data}")


        if not data or index >= len(data['articles']):
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return False

        article = data['articles'][index]
        if len(article) < 6:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏: {article}")
            return False

        headline = article[0]
        time_author = article[1] if article[1] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        description = article[2] if article[2] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        link = article[3] if article[3] else "#"
        category = article[4] if article[4] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        source = article[5] if article[5] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"

        if int(filter) == 2:
            if source not in sources[2]:
                sources[2].append(source)

        if source in sources[int(filter)]:


            # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            clickable_headline = f'<a href="{link}">{headline}</a>'

            message_text = (
                f"üìå <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {clickable_headline}\n\n"
                f"‚è≥ <b>–í—Ä–µ–º—è:</b> {time_author}\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:300] + '...' if len(description) > 300 else description}\n\n"
                f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {translation_dict.get(category, category)}\n\n"
                f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {link}"
            )

            markup = types.InlineKeyboardMarkup()
            if index < len(data['articles']) - 1:
                markup.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚Üí", callback_data=f"next_article_{cd}"))

            if index > 0:
                markup.add(types.InlineKeyboardButton(text="‚üµ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_article_{cd}"))

            markup.add(types.InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu"))



            if not m_id:
                bot.send_message(
                    chat_id,
                    message_text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_web_page_preview=True
                )

            else:
                bot.edit_message_text(
                    message_text,
                    chat_id,
                    m_id,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_web_page_preview=True
                )
                logger.info(f"–°—Ç–∞—Ç—å—è #{index} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            return True
        else:
            show_article(chat_id, index+1, m_id, filter, cd)
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_article: {str(e)}")
        return False


@bot.message_handler(commands=["start"])
def start(message):
    try:
        menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
        btn2 = types.KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
        menu_markup.add(btn1, btn2)

        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —Ç–µ–º–µ AI for Good –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü üöÄ.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—É—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã üíØ",
            reply_markup=menu_markup
        )
        print(period(n = 1))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        if message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å":
            category_markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(text="–≠–∫–æ–ª–æ–≥–∏—è", callback_data="Environmental")
            btn2 = types.InlineKeyboardButton(text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="Safety")
            btn3 = types.InlineKeyboardButton(text="–£—Å—Ç–æ–π—á–∏–≤—ã–µ –≥–æ—Ä–æ–¥–∞", callback_data="Sustainable Cities")
            btn4 = types.InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="Manufacturing")
            btn5 = types.InlineKeyboardButton(text="–ö—É–ª—å—Ç—É—Ä–∞", callback_data="Culture")
            category_markup.add(btn1)
            category_markup.add(btn2)
            category_markup.add(btn3)
            category_markup.add(btn4)
            category_markup.add(btn5)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=category_markup)
        elif message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏":
            back_to_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
            back_to_menu.add(btn)
            bot.send_message(message.chat.id, "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏: \n@alinesmakotina", reply_markup = back_to_menu)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            start(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_text: {str(e)}")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id

        if call.data in ["Environmental", "Safety", "Sustainable Cities", "Manufacturing", "Culture"]:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = categories[call.data]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            markup = types.InlineKeyboardMarkup()
            for date in dates:
                btn = types.InlineKeyboardButton(date, callback_data=f"date_{date}_{call.data}")
                markup.add(btn)

            bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=markup
            )

        elif call.data.startswith("date_"):

            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ', callback_data=f"filter_0_{call.data}")
            btn2 = types.InlineKeyboardButton('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ', callback_data=f"filter_1_{call.data}")
            btn3 = types.InlineKeyboardButton('–õ—é–±—ã–µ', callback_data=f"filter_2_{call.data}")
            markup.add(btn1)
            markup.add(btn2)
            markup.add(btn3)
            bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∫–∏–∫–∏:",
                reply_markup=markup
            )

        elif call.data.startswith('filter'):
            __, filter,_, date, category = call.data.split("_")
            subcategories = categories[category]

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏
            articles = get_articles_from_db(subcategories)

            if not articles:
                bot.send_message(chat_id, "–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            user_articles[chat_id] = {
                'category': category,
                'articles': articles,
                'current_index': 0
            }
            show_article(chat_id, 0, 0, filter, call.data)


        elif call.data[4::].startswith("_article"):
            user_data = user_articles.get(chat_id)
            if not user_data:
                return

            if call.data.startswith("next"):
                user_data['current_index'] += 1
            if call.data.startswith("prev"):
                user_data['current_index'] -= 1

            if user_data['current_index'] >= len(user_data['articles']):
                bot.send_message(chat_id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è")
                user_data['current_index'] = len(user_data['articles']) - 1
                return

            print(call.data)
            show_article(chat_id, user_data['current_index'], call.message.id, filter= call.data.split('_')[3], cd = call.data[13::])

        elif call.data == "back_to_menu":
            start(call.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
